// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: match.proto

#include "match.pb.h"
#include "match.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace match {

static const char* Match_method_names[] = {
  "/match.Match/GetDestination",
  "/match.Match/UpdateToMatchmaker",
  "/match.Match/RemoveFromMatchmaker",
};

std::unique_ptr< Match::Stub> Match::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Match::Stub> stub(new Match::Stub(channel, options));
  return stub;
}

Match::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetDestination_(Match_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateToMatchmaker_(Match_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveFromMatchmaker_(Match_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Match::Stub::GetDestination(::grpc::ClientContext* context, const ::match::Empty& request, ::match::MatchResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::match::Empty, ::match::MatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDestination_, context, request, response);
}

void Match::Stub::async::GetDestination(::grpc::ClientContext* context, const ::match::Empty* request, ::match::MatchResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::match::Empty, ::match::MatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDestination_, context, request, response, std::move(f));
}

void Match::Stub::async::GetDestination(::grpc::ClientContext* context, const ::match::Empty* request, ::match::MatchResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDestination_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::match::MatchResponse>* Match::Stub::PrepareAsyncGetDestinationRaw(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::match::MatchResponse, ::match::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDestination_, context, request);
}

::grpc::ClientAsyncResponseReader< ::match::MatchResponse>* Match::Stub::AsyncGetDestinationRaw(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDestinationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Match::Stub::UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::match::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::match::UpdateRequest, ::match::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateToMatchmaker_, context, request, response);
}

void Match::Stub::async::UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::match::UpdateRequest, ::match::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateToMatchmaker_, context, request, response, std::move(f));
}

void Match::Stub::async::UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateToMatchmaker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::match::UpdateResponse>* Match::Stub::PrepareAsyncUpdateToMatchmakerRaw(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::match::UpdateResponse, ::match::UpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateToMatchmaker_, context, request);
}

::grpc::ClientAsyncResponseReader< ::match::UpdateResponse>* Match::Stub::AsyncUpdateToMatchmakerRaw(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateToMatchmakerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Match::Stub::RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::match::RemoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::match::RemoveRequest, ::match::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveFromMatchmaker_, context, request, response);
}

void Match::Stub::async::RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::match::RemoveRequest, ::match::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFromMatchmaker_, context, request, response, std::move(f));
}

void Match::Stub::async::RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveFromMatchmaker_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::match::RemoveResponse>* Match::Stub::PrepareAsyncRemoveFromMatchmakerRaw(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::match::RemoveResponse, ::match::RemoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveFromMatchmaker_, context, request);
}

::grpc::ClientAsyncResponseReader< ::match::RemoveResponse>* Match::Stub::AsyncRemoveFromMatchmakerRaw(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveFromMatchmakerRaw(context, request, cq);
  result->StartCall();
  return result;
}

Match::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Match_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Match::Service, ::match::Empty, ::match::MatchResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Match::Service* service,
             ::grpc::ServerContext* ctx,
             const ::match::Empty* req,
             ::match::MatchResponse* resp) {
               return service->GetDestination(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Match_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Match::Service, ::match::UpdateRequest, ::match::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Match::Service* service,
             ::grpc::ServerContext* ctx,
             const ::match::UpdateRequest* req,
             ::match::UpdateResponse* resp) {
               return service->UpdateToMatchmaker(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Match_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Match::Service, ::match::RemoveRequest, ::match::RemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Match::Service* service,
             ::grpc::ServerContext* ctx,
             const ::match::RemoveRequest* req,
             ::match::RemoveResponse* resp) {
               return service->RemoveFromMatchmaker(ctx, req, resp);
             }, this)));
}

Match::Service::~Service() {
}

::grpc::Status Match::Service::GetDestination(::grpc::ServerContext* context, const ::match::Empty* request, ::match::MatchResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Match::Service::UpdateToMatchmaker(::grpc::ServerContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Match::Service::RemoveFromMatchmaker(::grpc::ServerContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace match

