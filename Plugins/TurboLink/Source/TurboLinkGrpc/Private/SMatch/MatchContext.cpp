//Generated by TurboLink CodeGenerator, do not edit!
#include "MatchContext.h"
#include "SMatch/MatchClient.h"
#include "MatchService_Private.h"
#include "MatchMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_Match_GetDestination::GrpcContext_Match_GetDestination(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_Match_GetDestination::Call(const FGrpcMatchEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::match::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UMatch* service = (UMatch*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetDestination(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_Match_GetDestination::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::match::MatchResponse* _RpcResponse) 
		{
			UMatchClient* client = (UMatchClient*)(this->Client);
			if (!(client->OnGetDestinationResponse.IsBound())) return;

			FGrpcMatchMatchResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetDestinationResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_Match_UpdateToMatchmaker::GrpcContext_Match_UpdateToMatchmaker(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_Match_UpdateToMatchmaker::Call(const FGrpcMatchUpdateRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::match::UpdateRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UMatch* service = (UMatch*)Service;
	RpcReaderWriter = service->d->Stub->AsyncUpdateToMatchmaker(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_Match_UpdateToMatchmaker::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::match::UpdateResponse* _RpcResponse) 
		{
			UMatchClient* client = (UMatchClient*)(this->Client);
			if (!(client->OnUpdateToMatchmakerResponse.IsBound())) return;

			FGrpcMatchUpdateResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnUpdateToMatchmakerResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_Match_RemoveFromMatchmaker::GrpcContext_Match_RemoveFromMatchmaker(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_Match_RemoveFromMatchmaker::Call(const FGrpcMatchRemoveRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::match::RemoveRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UMatch* service = (UMatch*)Service;
	RpcReaderWriter = service->d->Stub->AsyncRemoveFromMatchmaker(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_Match_RemoveFromMatchmaker::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::match::RemoveResponse* _RpcResponse) 
		{
			UMatchClient* client = (UMatchClient*)(this->Client);
			if (!(client->OnRemoveFromMatchmakerResponse.IsBound())) return;

			FGrpcMatchRemoveResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnRemoveFromMatchmakerResponse.Broadcast(Handle, _Result, response);
		}
	);
}
