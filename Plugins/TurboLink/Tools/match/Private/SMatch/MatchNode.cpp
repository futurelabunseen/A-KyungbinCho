//Generated by TurboLink CodeGenerator, do not edit!
#include "SMatch/MatchNode.h"
#include "SMatch/MatchService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallMatchGetDestination* UCallMatchGetDestination::GetDestination(UObject* WorldContextObject, const FGrpcMatchEmpty& Request)
{
	UCallMatchGetDestination* node = NewObject<UCallMatchGetDestination>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->Match = Cast<UMatch>(turboLinkManager->MakeService("Match"));
	if (node->Match == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;

	node->Match->OnServiceStateChanged.AddUniqueDynamic(node, &UCallMatchGetDestination::OnServiceStateChanged);
	return node;
}

void UCallMatchGetDestination::Activate()
{
	Match->Connect();
}

void UCallMatchGetDestination::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcMatchMatchResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		MatchClient = Match->MakeClient();
		MatchClient->OnContextStateChange.AddUniqueDynamic(this, &UCallMatchGetDestination::OnContextStateChange);
		MatchClient->OnGetDestinationResponse.AddUniqueDynamic(this, &UCallMatchGetDestination::OnResponse);

		Context = MatchClient->InitGetDestination();
		MatchClient->GetDestination(Context, Request);
	}
}

void UCallMatchGetDestination::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallMatchGetDestination::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcMatchMatchResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetDestinationResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallMatchGetDestination::Shutdown()
{
	Match->OnServiceStateChanged.RemoveDynamic(this, &UCallMatchGetDestination::OnServiceStateChanged);
	if (MatchClient != nullptr)
	{
		Match->RemoveClient(MatchClient);
		MatchClient->Shutdown();
		MatchClient = nullptr;
	}

	if (Match != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(Match);
		Match = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallMatchUpdateToMatchmaker* UCallMatchUpdateToMatchmaker::UpdateToMatchmaker(UObject* WorldContextObject, const FGrpcMatchUpdateRequest& Request)
{
	UCallMatchUpdateToMatchmaker* node = NewObject<UCallMatchUpdateToMatchmaker>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->Match = Cast<UMatch>(turboLinkManager->MakeService("Match"));
	if (node->Match == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;

	node->Match->OnServiceStateChanged.AddUniqueDynamic(node, &UCallMatchUpdateToMatchmaker::OnServiceStateChanged);
	return node;
}

void UCallMatchUpdateToMatchmaker::Activate()
{
	Match->Connect();
}

void UCallMatchUpdateToMatchmaker::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcMatchUpdateResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		MatchClient = Match->MakeClient();
		MatchClient->OnContextStateChange.AddUniqueDynamic(this, &UCallMatchUpdateToMatchmaker::OnContextStateChange);
		MatchClient->OnUpdateToMatchmakerResponse.AddUniqueDynamic(this, &UCallMatchUpdateToMatchmaker::OnResponse);

		Context = MatchClient->InitUpdateToMatchmaker();
		MatchClient->UpdateToMatchmaker(Context, Request);
	}
}

void UCallMatchUpdateToMatchmaker::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallMatchUpdateToMatchmaker::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcMatchUpdateResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnUpdateToMatchmakerResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallMatchUpdateToMatchmaker::Shutdown()
{
	Match->OnServiceStateChanged.RemoveDynamic(this, &UCallMatchUpdateToMatchmaker::OnServiceStateChanged);
	if (MatchClient != nullptr)
	{
		Match->RemoveClient(MatchClient);
		MatchClient->Shutdown();
		MatchClient = nullptr;
	}

	if (Match != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(Match);
		Match = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallMatchRemoveFromMatchmaker* UCallMatchRemoveFromMatchmaker::RemoveFromMatchmaker(UObject* WorldContextObject, const FGrpcMatchRemoveRequest& Request)
{
	UCallMatchRemoveFromMatchmaker* node = NewObject<UCallMatchRemoveFromMatchmaker>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->Match = Cast<UMatch>(turboLinkManager->MakeService("Match"));
	if (node->Match == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;

	node->Match->OnServiceStateChanged.AddUniqueDynamic(node, &UCallMatchRemoveFromMatchmaker::OnServiceStateChanged);
	return node;
}

void UCallMatchRemoveFromMatchmaker::Activate()
{
	Match->Connect();
}

void UCallMatchRemoveFromMatchmaker::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcMatchRemoveResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		MatchClient = Match->MakeClient();
		MatchClient->OnContextStateChange.AddUniqueDynamic(this, &UCallMatchRemoveFromMatchmaker::OnContextStateChange);
		MatchClient->OnRemoveFromMatchmakerResponse.AddUniqueDynamic(this, &UCallMatchRemoveFromMatchmaker::OnResponse);

		Context = MatchClient->InitRemoveFromMatchmaker();
		MatchClient->RemoveFromMatchmaker(Context, Request);
	}
}

void UCallMatchRemoveFromMatchmaker::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallMatchRemoveFromMatchmaker::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcMatchRemoveResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnRemoveFromMatchmakerResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallMatchRemoveFromMatchmaker::Shutdown()
{
	Match->OnServiceStateChanged.RemoveDynamic(this, &UCallMatchRemoveFromMatchmaker::OnServiceStateChanged);
	if (MatchClient != nullptr)
	{
		Match->RemoveClient(MatchClient);
		MatchClient->Shutdown();
		MatchClient = nullptr;
	}

	if (Match != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(Match);
		Match = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
