//Generated by TurboLink CodeGenerator, do not edit!
#include "SMatch/MatchService.h"
#include "SMatch/MatchClient.h"
#include "MatchService_Private.h"
#include "MatchMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UMatch::UMatch()
	: d(new UMatch::Private())
{
}

UMatch::~UMatch()
{
	delete d;
}

void UMatch::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("Match"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to Match: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = match::Match::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UMatch::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UMatchClient* UMatch::MakeClient()
{
	auto client = UGrpcService::MakeClient<UMatchClient>();
	return client;
}

void UMatch::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UMatch::CallGetDestination(const FGrpcMatchEmpty& Request, FGetDestinationResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UMatchGetDestinationLambdaWrapper* lambdaWrapper = NewObject<UMatchGetDestinationLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetDestination();
	InnerClient->OnGetDestinationResponse.AddUniqueDynamic(lambdaWrapper, &UMatchGetDestinationLambdaWrapper::OnResponse);
	InnerClient->GetDestination(lambdaWrapper->Handle, Request);
}

void UMatch::CallUpdateToMatchmaker(const FGrpcMatchUpdateRequest& Request, FUpdateToMatchmakerResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UMatchUpdateToMatchmakerLambdaWrapper* lambdaWrapper = NewObject<UMatchUpdateToMatchmakerLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitUpdateToMatchmaker();
	InnerClient->OnUpdateToMatchmakerResponse.AddUniqueDynamic(lambdaWrapper, &UMatchUpdateToMatchmakerLambdaWrapper::OnResponse);
	InnerClient->UpdateToMatchmaker(lambdaWrapper->Handle, Request);
}

void UMatch::CallRemoveFromMatchmaker(const FGrpcMatchRemoveRequest& Request, FRemoveFromMatchmakerResponseLambda ResponseLambda)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UMatchRemoveFromMatchmakerLambdaWrapper* lambdaWrapper = NewObject<UMatchRemoveFromMatchmakerLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitRemoveFromMatchmaker();
	InnerClient->OnRemoveFromMatchmakerResponse.AddUniqueDynamic(lambdaWrapper, &UMatchRemoveFromMatchmakerLambdaWrapper::OnResponse);
	InnerClient->RemoveFromMatchmaker(lambdaWrapper->Handle, Request);
}
