// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: match.proto
#ifndef GRPC_match_2eproto__INCLUDED
#define GRPC_match_2eproto__INCLUDED

#include "match.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace match {

class Match final {
 public:
  static constexpr char const* service_full_name() {
    return "match.Match";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetDestination(::grpc::ClientContext* context, const ::match::Empty& request, ::match::MatchResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::MatchResponse>> AsyncGetDestination(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::MatchResponse>>(AsyncGetDestinationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::MatchResponse>> PrepareAsyncGetDestination(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::MatchResponse>>(PrepareAsyncGetDestinationRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::match::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::UpdateResponse>> AsyncUpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::UpdateResponse>>(AsyncUpdateToMatchmakerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::UpdateResponse>> PrepareAsyncUpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::UpdateResponse>>(PrepareAsyncUpdateToMatchmakerRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::match::RemoveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::RemoveResponse>> AsyncRemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::RemoveResponse>>(AsyncRemoveFromMatchmakerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::RemoveResponse>> PrepareAsyncRemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::match::RemoveResponse>>(PrepareAsyncRemoveFromMatchmakerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetDestination(::grpc::ClientContext* context, const ::match::Empty* request, ::match::MatchResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDestination(::grpc::ClientContext* context, const ::match::Empty* request, ::match::MatchResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::match::MatchResponse>* AsyncGetDestinationRaw(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::match::MatchResponse>* PrepareAsyncGetDestinationRaw(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::match::UpdateResponse>* AsyncUpdateToMatchmakerRaw(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::match::UpdateResponse>* PrepareAsyncUpdateToMatchmakerRaw(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::match::RemoveResponse>* AsyncRemoveFromMatchmakerRaw(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::match::RemoveResponse>* PrepareAsyncRemoveFromMatchmakerRaw(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetDestination(::grpc::ClientContext* context, const ::match::Empty& request, ::match::MatchResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::MatchResponse>> AsyncGetDestination(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::MatchResponse>>(AsyncGetDestinationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::MatchResponse>> PrepareAsyncGetDestination(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::MatchResponse>>(PrepareAsyncGetDestinationRaw(context, request, cq));
    }
    ::grpc::Status UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::match::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::UpdateResponse>> AsyncUpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::UpdateResponse>>(AsyncUpdateToMatchmakerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::UpdateResponse>> PrepareAsyncUpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::UpdateResponse>>(PrepareAsyncUpdateToMatchmakerRaw(context, request, cq));
    }
    ::grpc::Status RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::match::RemoveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::RemoveResponse>> AsyncRemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::RemoveResponse>>(AsyncRemoveFromMatchmakerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::RemoveResponse>> PrepareAsyncRemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::match::RemoveResponse>>(PrepareAsyncRemoveFromMatchmakerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetDestination(::grpc::ClientContext* context, const ::match::Empty* request, ::match::MatchResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDestination(::grpc::ClientContext* context, const ::match::Empty* request, ::match::MatchResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateToMatchmaker(::grpc::ClientContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveFromMatchmaker(::grpc::ClientContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::match::MatchResponse>* AsyncGetDestinationRaw(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::match::MatchResponse>* PrepareAsyncGetDestinationRaw(::grpc::ClientContext* context, const ::match::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::match::UpdateResponse>* AsyncUpdateToMatchmakerRaw(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::match::UpdateResponse>* PrepareAsyncUpdateToMatchmakerRaw(::grpc::ClientContext* context, const ::match::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::match::RemoveResponse>* AsyncRemoveFromMatchmakerRaw(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::match::RemoveResponse>* PrepareAsyncRemoveFromMatchmakerRaw(::grpc::ClientContext* context, const ::match::RemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDestination_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateToMatchmaker_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveFromMatchmaker_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetDestination(::grpc::ServerContext* context, const ::match::Empty* request, ::match::MatchResponse* response);
    virtual ::grpc::Status UpdateToMatchmaker(::grpc::ServerContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response);
    virtual ::grpc::Status RemoveFromMatchmaker(::grpc::ServerContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDestination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDestination() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDestination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDestination(::grpc::ServerContext* /*context*/, const ::match::Empty* /*request*/, ::match::MatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDestination(::grpc::ServerContext* context, ::match::Empty* request, ::grpc::ServerAsyncResponseWriter< ::match::MatchResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateToMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateToMatchmaker() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateToMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateToMatchmaker(::grpc::ServerContext* /*context*/, const ::match::UpdateRequest* /*request*/, ::match::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateToMatchmaker(::grpc::ServerContext* context, ::match::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::match::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveFromMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveFromMatchmaker() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RemoveFromMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFromMatchmaker(::grpc::ServerContext* /*context*/, const ::match::RemoveRequest* /*request*/, ::match::RemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFromMatchmaker(::grpc::ServerContext* context, ::match::RemoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::match::RemoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDestination<WithAsyncMethod_UpdateToMatchmaker<WithAsyncMethod_RemoveFromMatchmaker<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetDestination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDestination() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::match::Empty, ::match::MatchResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::match::Empty* request, ::match::MatchResponse* response) { return this->GetDestination(context, request, response); }));}
    void SetMessageAllocatorFor_GetDestination(
        ::grpc::MessageAllocator< ::match::Empty, ::match::MatchResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::match::Empty, ::match::MatchResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDestination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDestination(::grpc::ServerContext* /*context*/, const ::match::Empty* /*request*/, ::match::MatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDestination(
      ::grpc::CallbackServerContext* /*context*/, const ::match::Empty* /*request*/, ::match::MatchResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateToMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateToMatchmaker() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::match::UpdateRequest, ::match::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::match::UpdateRequest* request, ::match::UpdateResponse* response) { return this->UpdateToMatchmaker(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateToMatchmaker(
        ::grpc::MessageAllocator< ::match::UpdateRequest, ::match::UpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::match::UpdateRequest, ::match::UpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateToMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateToMatchmaker(::grpc::ServerContext* /*context*/, const ::match::UpdateRequest* /*request*/, ::match::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateToMatchmaker(
      ::grpc::CallbackServerContext* /*context*/, const ::match::UpdateRequest* /*request*/, ::match::UpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveFromMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveFromMatchmaker() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::match::RemoveRequest, ::match::RemoveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::match::RemoveRequest* request, ::match::RemoveResponse* response) { return this->RemoveFromMatchmaker(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveFromMatchmaker(
        ::grpc::MessageAllocator< ::match::RemoveRequest, ::match::RemoveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::match::RemoveRequest, ::match::RemoveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveFromMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFromMatchmaker(::grpc::ServerContext* /*context*/, const ::match::RemoveRequest* /*request*/, ::match::RemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFromMatchmaker(
      ::grpc::CallbackServerContext* /*context*/, const ::match::RemoveRequest* /*request*/, ::match::RemoveResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetDestination<WithCallbackMethod_UpdateToMatchmaker<WithCallbackMethod_RemoveFromMatchmaker<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDestination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDestination() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDestination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDestination(::grpc::ServerContext* /*context*/, const ::match::Empty* /*request*/, ::match::MatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateToMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateToMatchmaker() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateToMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateToMatchmaker(::grpc::ServerContext* /*context*/, const ::match::UpdateRequest* /*request*/, ::match::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveFromMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveFromMatchmaker() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RemoveFromMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFromMatchmaker(::grpc::ServerContext* /*context*/, const ::match::RemoveRequest* /*request*/, ::match::RemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDestination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDestination() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDestination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDestination(::grpc::ServerContext* /*context*/, const ::match::Empty* /*request*/, ::match::MatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDestination(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateToMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateToMatchmaker() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateToMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateToMatchmaker(::grpc::ServerContext* /*context*/, const ::match::UpdateRequest* /*request*/, ::match::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateToMatchmaker(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveFromMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveFromMatchmaker() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RemoveFromMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFromMatchmaker(::grpc::ServerContext* /*context*/, const ::match::RemoveRequest* /*request*/, ::match::RemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveFromMatchmaker(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDestination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDestination() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDestination(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDestination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDestination(::grpc::ServerContext* /*context*/, const ::match::Empty* /*request*/, ::match::MatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDestination(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateToMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateToMatchmaker() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateToMatchmaker(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateToMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateToMatchmaker(::grpc::ServerContext* /*context*/, const ::match::UpdateRequest* /*request*/, ::match::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateToMatchmaker(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveFromMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveFromMatchmaker() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveFromMatchmaker(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveFromMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveFromMatchmaker(::grpc::ServerContext* /*context*/, const ::match::RemoveRequest* /*request*/, ::match::RemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveFromMatchmaker(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDestination : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDestination() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::match::Empty, ::match::MatchResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::match::Empty, ::match::MatchResponse>* streamer) {
                       return this->StreamedGetDestination(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDestination() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDestination(::grpc::ServerContext* /*context*/, const ::match::Empty* /*request*/, ::match::MatchResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDestination(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::match::Empty,::match::MatchResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateToMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateToMatchmaker() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::match::UpdateRequest, ::match::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::match::UpdateRequest, ::match::UpdateResponse>* streamer) {
                       return this->StreamedUpdateToMatchmaker(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateToMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateToMatchmaker(::grpc::ServerContext* /*context*/, const ::match::UpdateRequest* /*request*/, ::match::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateToMatchmaker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::match::UpdateRequest,::match::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveFromMatchmaker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveFromMatchmaker() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::match::RemoveRequest, ::match::RemoveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::match::RemoveRequest, ::match::RemoveResponse>* streamer) {
                       return this->StreamedRemoveFromMatchmaker(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveFromMatchmaker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveFromMatchmaker(::grpc::ServerContext* /*context*/, const ::match::RemoveRequest* /*request*/, ::match::RemoveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveFromMatchmaker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::match::RemoveRequest,::match::RemoveResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDestination<WithStreamedUnaryMethod_UpdateToMatchmaker<WithStreamedUnaryMethod_RemoveFromMatchmaker<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDestination<WithStreamedUnaryMethod_UpdateToMatchmaker<WithStreamedUnaryMethod_RemoveFromMatchmaker<Service > > > StreamedService;
};

}  // namespace match


#endif  // GRPC_match_2eproto__INCLUDED
